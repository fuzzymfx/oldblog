[{"title":"CheatSheet- MD","author":"Anubhab Patnaik","date":"May 29, 2022","link":"https://anubhavp.dev/blog/cheatsheet.html","content":"<h1 id=\"navigation\" tabindex=\"-1\">Navigation</h1>\n<blockquote>\n<p>Tech stuf</p>\n</blockquote>\n<ol>\n<li>First item</li>\n<li>Second item</li>\n<li>Third item</li>\n<li>Fourth item</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>Navigation</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Tech</td>\n<td>Tech stuff that I have written</td>\n</tr>\n<tr>\n<td>Paragraph</td>\n<td>Text</td>\n</tr>\n</tbody>\n</table>\n<pre><code class=\"language-js\">  <span class=\"hljs-string\">&quot;firstName&quot;</span>: <span class=\"hljs-string\">&quot;John&quot;</span>,\n  <span class=\"hljs-string\">&quot;lastName&quot;</span>: <span class=\"hljs-string\">&quot;Smith&quot;</span>,\n  <span class=\"hljs-string\">&quot;age&quot;</span>: <span class=\"hljs-number\">25</span>\n</code></pre>\n<hr>\n<h1 id=\"h1-heading-8-\" tabindex=\"-1\">h1 Heading 8-)</h1>\n<h2 id=\"h2-heading\" tabindex=\"-1\">h2 Heading</h2>\n<h3 id=\"h3-heading\" tabindex=\"-1\">h3 Heading</h3>\n<h4 id=\"h4-heading\" tabindex=\"-1\">h4 Heading</h4>\n<h5 id=\"h5-heading\" tabindex=\"-1\">h5 Heading</h5>\n<h6 id=\"h6-heading\" tabindex=\"-1\">h6 Heading</h6>\n<h2 id=\"horizontal-rules\" tabindex=\"-1\">Horizontal Rules</h2>\n<hr>\n<hr>\n<hr>\n<h2 id=\"typographic-replacements\" tabindex=\"-1\">Typographic replacements</h2>\n<p>Enable typographer option to see result.</p>\n<p>© © ® ® ™ ™ (p) (P) ±</p>\n<p>test… test… test… test?.. test!..</p>\n<p>!!! ??? ,  – —</p>\n<p>“Smartypants, double quotes” and ‘single quotes’</p>\n<h2 id=\"emphasis\" tabindex=\"-1\">Emphasis</h2>\n<p><strong>This is bold text</strong></p>\n<p><strong>This is bold text</strong></p>\n<p><em>This is italic text</em></p>\n<p><em>This is italic text</em></p>\n<p><s>Strikethrough</s></p>\n<h2 id=\"blockquotes\" tabindex=\"-1\">Blockquotes</h2>\n<blockquote>\n<p>Blockquotes can also be nested…</p>\n<blockquote>\n<p>…by using additional greater-than signs right next to each other…</p>\n<blockquote>\n<p>…or with spaces between arrows.</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<h2 id=\"lists\" tabindex=\"-1\">Lists</h2>\n<p>Unordered</p>\n<ul>\n<li>Create a list by starting a line with <code>+</code>, <code>-</code>, or <code>*</code></li>\n<li>Sub-lists are made by indenting 2 spaces:\n<ul>\n<li>Marker character change forces new list start:\n<ul>\n<li>Ac tristique libero volutpat at</li>\n</ul>\n<ul>\n<li>Facilisis in pretium nisl aliquet</li>\n</ul>\n<ul>\n<li>Nulla volutpat aliquam velit</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Very easy!</li>\n</ul>\n<p>Ordered</p>\n<ol>\n<li>\n<p>Lorem ipsum dolor sit amet</p>\n</li>\n<li>\n<p>Consectetur adipiscing elit</p>\n</li>\n<li>\n<p>Integer molestie lorem at massa</p>\n</li>\n<li>\n<p>You can use sequential numbers…</p>\n</li>\n<li>\n<p>…or keep all the numbers as <code>1.</code></p>\n</li>\n</ol>\n<p>Start numbering with offset:</p>\n<ol start=\"57\">\n<li>foo</li>\n<li>bar</li>\n</ol>\n<h2 id=\"code\" tabindex=\"-1\">Code</h2>\n<p>Inline <code>code</code></p>\n<p>Indented code</p>\n<pre><code>// Some comments\nline 1 of code\nline 2 of code\nline 3 of code\n</code></pre>\n<p>Block code “fences”</p>\n<pre><code>Sample text here...\n</code></pre>\n<p>Syntax highlighting</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">bar</span>) {\n  <span class=\"hljs-keyword\">return</span> bar++;\n};\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-number\">5</span>));\n</code></pre>\n<h2 id=\"tables\" tabindex=\"-1\">Tables</h2>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>data</td>\n<td>path to data files to supply the data that will be passed into templates.</td>\n</tr>\n<tr>\n<td>engine</td>\n<td>engine to be used for processing templates. Handlebars is the default.</td>\n</tr>\n<tr>\n<td>ext</td>\n<td>extension to be used for dest files.</td>\n</tr>\n</tbody>\n</table>\n<p>Right aligned columns</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right\">Option</th>\n<th style=\"text-align:right\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">data</td>\n<td style=\"text-align:right\">path to data files to supply the data that will be passed into templates.</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">engine</td>\n<td style=\"text-align:right\">engine to be used for processing templates. Handlebars is the default.</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">ext</td>\n<td style=\"text-align:right\">extension to be used for dest files.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"links\" tabindex=\"-1\">Links</h2>\n<p><a href=\"http://dev.nodeca.com\">link text</a></p>\n<p><a href=\"http://nodeca.github.io/pica/demo/\" title=\"title text!\">link with title</a></p>\n<p>Autoconverted link <a href=\"https://github.com/nodeca/pica\">https://github.com/nodeca/pica</a> (enable linkify to see)</p>\n<h2 id=\"images\" tabindex=\"-1\">Images</h2>\n<p><img src=\"https://octodex.github.com/images/minion.png\" alt=\"Minion\">\n<img src=\"https://octodex.github.com/images/stormtroopocat.jpg\" alt=\"Stormtroopocat\" title=\"The Stormtroopocat\"></p>\n<p>Like links, Images also have a footnote style syntax</p>\n<p><img src=\"https://octodex.github.com/images/dojocat.jpg\" alt=\"Alt text\" title=\"The Dojocat\"></p>\n<p>With a reference later in the document defining the URL location:</p>\n<h2 id=\"plugins\" tabindex=\"-1\">Plugins</h2>\n<p>The killer feature of <code>markdown-it</code> is very effective support of\n<a href=\"https://www.npmjs.org/browse/keyword/markdown-it-plugin\">syntax plugins</a>.</p>\n<h3 id=\"emojies\" tabindex=\"-1\"><a href=\"https://github.com/markdown-it/markdown-it-emoji\">Emojies</a></h3>\n<blockquote>\n<p>Classic markup: :wink: :crush: :cry: :tear: :laughing: :yum:</p>\n<p>Shortcuts (emoticons): :-) :-( 8-) ;)</p>\n</blockquote>\n<p>see <a href=\"https://github.com/markdown-it/markdown-it-emoji#change-output\">how to change output</a> with twemoji.</p>\n<h3 id=\"subscript-superscript\" tabindex=\"-1\"><a href=\"https://github.com/markdown-it/markdown-it-sub\">Subscript</a> / <a href=\"https://github.com/markdown-it/markdown-it-sup\">Superscript</a></h3>\n<ul>\n<li>19^th^</li>\n<li>H~2~O</li>\n</ul>\n<h3 id=\"ins\" tabindex=\"-1\"><a href=\"https://github.com/markdown-it/markdown-it-ins\">&lt;ins&gt;</a></h3>\n<p>++Inserted text++</p>\n<h3 id=\"mark\" tabindex=\"-1\"><a href=\"https://github.com/markdown-it/markdown-it-mark\">&lt;mark&gt;</a></h3>\n<p>==Marked text==</p>\n<h3 id=\"footnotes\" tabindex=\"-1\"><a href=\"https://github.com/markdown-it/markdown-it-footnote\">Footnotes</a></h3>\n<p>Footnote 1 link[^first].</p>\n<p>Footnote 2 link[^second].</p>\n<p>Inline footnote^[Text of inline footnote] definition.</p>\n<p>Duplicated footnote reference[^second].</p>\n<p>[^first]: Footnote <strong>can have markup</strong></p>\n<pre><code>and multiple paragraphs.\n</code></pre>\n<p>[^second]: Footnote text.</p>\n<h3 id=\"definition-lists\" tabindex=\"-1\"><a href=\"https://github.com/markdown-it/markdown-it-deflist\">Definition lists</a></h3>\n<p>Term 1</p>\n<p>:   Definition 1\nwith lazy continuation.</p>\n<p>Term 2 with <em>inline markup</em></p>\n<p>:   Definition 2</p>\n<pre><code>    { some code, part of Definition 2 }\n\nThird paragraph of definition 2.\n</code></pre>\n<p><em>Compact style:</em></p>\n<p>Term 1\n~ Definition 1</p>\n<p>Term 2\n~ Definition 2a\n~ Definition 2b</p>\n<h3 id=\"abbreviations\" tabindex=\"-1\"><a href=\"https://github.com/markdown-it/markdown-it-abbr\">Abbreviations</a></h3>\n<p>This is HTML abbreviation example.</p>\n<p>It converts “HTML”, but keep intact partial entries like “xxxHTMLyyy” and so on.</p>\n<p>*[HTML]: Hyper Text Markup Language</p>\n<h3 id=\"custom-containers\" tabindex=\"-1\"><a href=\"https://github.com/markdown-it/markdown-it-container\">Custom containers</a></h3>\n<p>::: warning\n<em>here be dragons</em>\n:::</p>\n"},{"author":"Srijan Paul","title":"Why is Web3 a sham?","date":"2022-01-19","description":"A short rant on the state of Web3","tags":["project","crypto","web3"],"ShowBreadCrumbs":true,"link":"https://anubhavp.dev/blog/InfeasibleWeb3.html","content":"<p>During my short stint as a blockchain developer, I’ve learned a lot and have met amazing people.\nWhile I acknowledge the skill and reverence of some developers in this domain,\nI still remain uncharmed by the zeal of web3.</p>\n<p>If you’re a blockchain enthusiast reading this, know that I understand where you stand.\nI’ve been in your shoes,\nand I draw my opinions from personal encounters with the crypto ecosystem.\nWhat I ask of you as a peer then, is that you put your tech under a lens of scrutiny and sever any bonds that may develop into religious fanaticism.\nThis is true of all engineering, of course.\nWe cannot improve a technology if we’re blind to it’s limitations.\nAnd we can’t perceive limitations unless we are open to critique.\nCritique such as this one.</p>\n<p>Most engineers who build blockchains and NFT based projects recognise the technical limitations of this technology.\nYet they choose to write them off as “tradeoffs” for <em>web3</em>, or worse, turn a blind eye to them.\nAnd then there are the social problems -\nones that are so nuanced that they can’t be tackled by any number of token standards or consensus algorithms.\nThis post is my attempt at shedding some light on the problems that I’m aware of.</p>\n<h2 id=\"social\" tabindex=\"-1\">Social</h2>\n<h3 id=\"the-majority-of-crypto-is-shady-even-for-artists\" tabindex=\"-1\">The majority of crypto is shady, even for artists</h3>\n<p>Cryptocurrency is always found in a massive web of controversy, frauds and scams.\nShow me one successful crypto project that has served a real purpose,\nand I’ll show you 10 that were outed for being scams.</p>\n<p>NFTs claim to be a revolution for artists and creators.\nBut what happens when someone makes an NFT out of stolen art?\nOwing to a blockchain’s immutable nature,\nthe thief now owns the art forever, even if they’re found out.</p>\n<p>The solution that crypto evangelists propose is that artists should mint an NFT\nout of their art before someone else gets the chance.\nBut this is far from a realistic solution.\nA creator should not be bothered with signing tokens on a myriad of different markets and blockchains just to avoid being wronged.\nWhy should an artist <strong>pay</strong> to register an NFT on Flow, Ethereum, Solana, Monero, Tezos and countless other chains under the sun?</p>\n<h3 id=\"nft-marketplaces-are-centralised-and-controlled\" tabindex=\"-1\">NFT marketplaces are centralised and controlled</h3>\n<p>The willingness to be free from institutional regulation and government censorship is at the nexus of “web3”.\nThe idea of a government powerless to stop a citizen from owning any digital asset appeals to many.\nHowever under this veil of liberation and freedom lies a truth that no crypto-bro will tell you -\nThe very marketplace you view and trade your assets on are centralised and controlled.</p>\n<p>NFT assets <strong>can</strong> be removed from <a href=\"https://objkt.com/\">objkt</a> and <a href=\"https://opensea.io/\">opensea</a>, you <strong>can</strong> be banned from <a href=\"https://www.coinbase.com\">coinbase</a>.\n<a href=\"https://support.opensea.io/hc/en-us/articles/1500010625362-Why-are-my-items-and-collections-delisted-\">Opensea even admits it</a> themselves!\nIf you violate any of the following vague “rules”,\nyour NFT will be delisted from a supposedly “decentralised” and “uncensorable” marketplace.</p>\n<blockquote>\n<ul>\n<li>infringe on protected intellectual property,</li>\n<li>promote suicide or self-harm,</li>\n<li>incite hate or violence against others,</li>\n<li>degrade or dox another individual,</li>\n<li>otherwise violate our <a href=\"https://opensea.io/tos\">terms of service</a>.</li>\n</ul>\n</blockquote>\n<p>But what constitutes “violence or hate against others”?\nWill I get banned if I make fun of a political figure?\nRather, <strong>Can</strong> I get banned if I make fun of a political figure?\nClearly, the answer is yes.\nThe people moderating this website do wield that power.\n“Moderating a decentralised and censor-proof website” is an oxymoron,\nand how the people trading on such platforms fail to realise this eludes me.</p>\n<h3 id=\"nfts-are-worthless\" tabindex=\"-1\">NFTs are… worthless?</h3>\n<p>In stark contrast with their price tags, the actual value represented by an NFT is surprisingly low.\nSay you spend all the money you saved for your child’s education to buy this rock NFT:</p>\n<p><img src=\"https://pbs.twimg.com/profile_images/1423533825028616195/-iFC12qC_400x400.jpg\" alt=\"rock-nft\"></p>\n<p>Now you’re pumped with adrenaline, because you <strong>own</strong> this piece of history.\nThe image is yours, and you claim all rights to its usage and redistribution.\nThis art piece is now valued as if it were a real and tangible rock, there is only one rock and only one owner - you.</p>\n<p>Right? <br/>\nWrong. <br/>\nThe artist still owns the image, and they’re entitled to sell it to others,\nor even make yet another NFT out of it on a different blockchain and sell it there.</p>\n<p>So if you don’t own this rock, what exactly do you possess?\nThe ability to use this on the internet as you please?\nSo do I. I used it just now, to show you what it looks like.</p>\n<p>Had the rock been real,\nthe owner would’ve been capable of sculpting it into a showpiece -\nthe exact physical properties of which no one else can have.\nOr they could use it to assault kids on a street, something noone else could do with the same edge,\nfor there exists only one.\nIf I tried to assault children with a similar rock, I wouldn’t be subject to the same acclaim as you.\nBecause my rock and yours have real, physical differences down to the microscopic level.</p>\n<p>When an asset is digital, and an image at that, “ownership” comes with no priviledges.\nIf you can use it as your twitter avatar, I can too.\nAnd unlike the real world, my avatar has the exact same pixel composition as yours.</p>\n<p>Whatever you can do it with it, I can.\nExcept you now bear a financial loss in pursuit of this “ownership”\nbecause people told you it means something.</p>\n<h3 id=\"your-get-rich-quick-chances-are-miniscule\" tabindex=\"-1\">Your ‘get-rich-quick’ chances are miniscule</h3>\n<p><strong>The value of an NFT is what you believe it to be.</strong></p>\n<p>Crypto evangelists would have you believe this too, except they’d word it very differently.\nBut you can’t get the world to agree on this strange belief system\nwhere nearly identical 32x32 pixel people are supposed to encapsulate an “idea” worth\nthousands of dollars.</p>\n<p>To most, it just won’t make sense.\nWhy should this clump of pixels cost 1M$?</p>\n<p><img src=\"https://cryptopotato.com/wp-content/uploads/2021/03/cryptopunk.jpg\" alt=\"cryptopunk\"></p>\n<p>Why should we collectively enforce this belief? <br/>What can we achieve with this new school of thought that we couldn’t before?</p>\n<p>Some crypto evangelists answer this with “<a href=\"https://cryptopotato.com/this-cryptopunk-nft-was-bought-for-15k-in-2018-now-sold-for-8-million/\">It can make you rich!</a>”.\nThere is a nugget of truth to that,\nbut it’s a very twisted statement that conceals more than it shows.\nWe’ve to realize that this value doesn’t come from nowhere.\nFor you to have gained in this flaky landscape, several others had to lose.\nAnd if general probability theory is anything to go by, you’re more likely to find yourself in the losing lot.</p>\n<p>MLM scams and pyramid schemes play a surprisingly similar game,\nbut enough people have already drawn this analogy so that I don’t have to.</p>\n<h2 id=\"engineering\" tabindex=\"-1\">Engineering</h2>\n<h3 id=\"nfts-can-be-altered\" tabindex=\"-1\">NFTs CAN be altered</h3>\n<p>Unknown to most regular consumers of crypto,\nthe actual items represented by NFTs they own aren’t actually stored on a blockchain.\ni.e - the million dollar ape JPEG someone spent their life savings on is physically located somewhere outside Ethereum.\nThey’re stored on a separate database which could be centralised (but generally isn’t, like IPFS).\nThe blockchain itself only stores a URI to the resource in question (say <code>ipfs://foo/bar/orangutan.jpg</code>).</p>\n<p>Look at Ethereum’s <a href=\"https://eips.ethereum.org/EIPS/eip-721\">EIP-721</a> token standard.\nOnce you’ve made your way through the document, you’ll realise there is <strong>nothing</strong> stopping a server\nfrom serving different files at different times of the day for the same URI.\nOr serving different files based on where the client requesting the resource is located.\nThere is even a word for this act, it starts with a <strong>c</strong>, ends with an <strong>r</strong> and rhymes with “tensor”.\nSee <a href=\"https://moxie.org/2022/01/07/web3-first-impressions.html#making-an-nft\">this NFT</a> by Moxie Marlinspike as an example.</p>\n<h3 id=\"web3-is-not-technically-feasible\" tabindex=\"-1\">Web3 is not technically feasible</h3>\n<p>Ever so often you’ll cross web3 enthusiasts on twitter who claim the internet will be decentralized in the near future.\nThat there will be no institutional control and a governments’ powers over social media will cease to exist.\nAnd they claim this will be by virtue of a blockchain driven internet, that runs on gas fees.</p>\n<p>It just isn’t possible.\nAn advertisement driven web, no matter how terrible, is still far superior to one that is gas fees driven.\nWhen texting, people will always prefer ads to paying out of their own pocket.</p>\n<p>However, lets leave the human factors aside for a moment.\nLet’s imagine a world where humans willingly pay to post instagram selfies.\nEven in that universe, blockchain is incapable of supporting such an infrastructure.</p>\n<p>Blockchains are <strong>SLOW</strong>. <br/>\nThey’re simply inefficient when put up against traditional databases and the decades old client-server architechture.\nWhat’s even worse is traditional scaling and optimization techniques do not apply to a blockchain.\nThe optimizations that do exist (<a href=\"https://wiki.tezosagora.org/build/blockchain-indexers\">indexers</a>) are centralized and beat the whole point of web3.</p>\n<p>A blockchain is a large append-only merkle tree that needs the computing power of a suburb to confirm a group of transactions, and even then it can take minutes depending on the implementation.\nFor highly critical transactions,\nyou’ve to wait for 5-6 rounds of “confirmation” before gaining reasonable confidence in the operation you just performed.</p>\n<p>Anyone who has actually studied this subject in appropriate detail would tell you it is impossible for such inefficient technology to withhold traffic on sites like reddit, discord, twitter, facebook, 4chan, youtube etc.</p>\n<p>The more energy efficient consensus algorithms, like “Proof of Stake”, have a different kind of flaw.\nThey favor miners (called <a href=\"https://wiki.tezosagora.org/learn/baking\">bakers</a> on the Tezos chain) who own more coin.\nA classic “rich get richer” scheme.</p>\n<p>This is not to say blockchain is completely useless.\nIt <strong>might</strong> be used for problems such as food contamination tracing, and verifying ownership of legal documents.\nHowever the world today is in a frenzy to use it in all the places where it doesn’t belong.</p>\n"},{"author":"Anubhab Patnaik","title":"Decentralization in MetaMUI Wallet: A Case Study","date":"2022-08-31","description":"A case study on how MetaMUI wallet claims to be decentralized and how it actully works.","tags":["project","metamui","crypto"],"ShowBreadCrumbs":true,"link":"https://anubhavp.dev/blog/metamuiwallet.html","content":"<p>I am working with <a href=\"https://squbix.com/\">Squbix Digital</a> to build a decentralized, secure and scalable solution using blockchain technology for <a href=\"https://swnglobal.com/\">Sovereign Wallet</a>. The solution is to build a platform to exchange digital assets such as cryptocurrencies and digital currencies across a country/ organization and a cross-border payments system. Here is the <a href=\"https://sovereignwallet-network.github.io/whitepaper/MetaMUI-Blockchain-White-Paper.pdf\">metamui whitepaper</a> and here are some of the things that I couldn’t digest well.</p>\n<h2 id=\"metablockchain-core\" tabindex=\"-1\">Metablockchain-core</h2>\n<p>Metablockchain: The blockchain that lets you regulate digital currencies and cryptocurrencies across the nation. The platform is built on Polkadot protocol that has significantly better runtime efficiency, is cost-effective, and supports parallel faster transactions when compared to other traditional blockchains. The Polkadot protocol is designed to allow unrelated blockchains to securely talk to each other, so that value or data can flow between, say, the Ethereum and Bitcoin blockchains without any intermediary. It’s also designed to be speedy and scalable, via the use of many parallel blockchains (or “parachains”) that take much of the processing demand off of the main blockchain. The Polkadot network can process more than 1,000 transactions per second, compared to about 7 for Bitcoin and 30 for Ethereum. As the network grows and more parachains are added, Polkadot should get even faster, with speeds that could hit a million transactions per second.</p>\n<h3 id=\"robust-decentralized-and-secure\" tabindex=\"-1\">Robust, decentralized, and secure?</h3>\n<p>The product is built in such a way that a country/ government/central banking authority can adopt this platform and make it run parallel with the currently existing infrastructure. Users can send and receive money across the country and it takes significantly less time to handle international transactions. It seems great, an easier way to handle transactions, without having to pay taxes to the government for making international exchanges! But the reality may not be as exciting.</p>\n<blockquote>\n<p>MetaMUI is claimed to solve the blockchain trilemma by having a hybrid architecture. For micropayment, we\nused centralized architecture to achieve high performance and high security. For higher volume payment, we\nused decentralized architecture to achieve high security and decentralization.</p>\n</blockquote>\n<p>The current infrastructure is easy to use but is not as secure as claimed. The primary goal of the infrastructure is to make it easier for users to send and receive (traditional banking) money across the country and, it is not secure because it is <strong>not decentralized</strong>, and <strong>well-developed</strong> . Introducing a blockchain as a means of a runtime to carry out transactions as opposed to a traditional banking system is to make sure that all the transactions are handled in a decentralized manner and anyone when wanted, can query and view the source, and all the states of the transactions but it is not the case here.</p>\n<h3 id=\"issues-with-the-current-infrastructure\" tabindex=\"-1\">Issues with the current infrastructure</h3>\n<ol>\n<li>\n<p><strong>The usage of a private blockchain</strong>.</p>\n<p>The banks are responsible for running validator nodes that run on the private blockchain and are responsible for validating the transactions and the states of the system. The claims as said were to improve security and transparency but this approach opposes the purpose of the claims. A private blockchain to carry out transactions makes it a kind of database and a runtime that is not public and not accessible to anyone. The banks are servers and the blockchains act as databases. The clients are the users. Seem familiar? This is a client-server architecture with a blockchain running as a database.</p>\n<blockquote>\n<p>Bank Node is a publisher of anonymous tokenized cash. Users can choose Bank Node service providers and\nhave a token contract to issue digital cash. Based on the contract, it can be a debit card or credit card type.\nWhen the user pays the merchant with digital cash, the merchant can claim the digital currency to the issuing\nBank Node. “The performance of this payment process should be equal to or better than normal credit card\npayments.”</p>\n</blockquote>\n<blockquote>\n<p>For high-volume money transfer, MetaMUI utilizes a normal blockchain consensus protocol. All Bank Nodes are\ninvolved in the consensus of multiple digital currencies. Since this a transfer between identities, it is a kind of\ndigital cheque payment. Also since we are using blockchain consensus to do so instead of a centralized server\nfor cheque clearance, this is a decentralized cheque system. This payment process is slower than the\nconventional credit card payment but it is much faster and costs less than an account-based international bank\ntransfer.</p>\n</blockquote>\n<p>Building a platform for carrying out transactions is perfectly okay but introducing blockchains as a means of a just database doesn’t make sense. It feels like a gimmick, a buzzword to secure seed &amp; money from investors. Also, there is nothing wrong with a client-server architecture but the speed of current infrastructure relies on implementing a blockchain as a runtime for transactions, which, as always, is <strong>slow</strong>. Blockchains are supposed to be secure and transparent but they are not efficient and fast. The transaction data when accessible publicly make the network secure, which it is not, here. Whereas a more traditional client-server architecture is equally secure and more efficient. Look at the current banking and payment gateway scenario in India. UPI payments, net banking, and debit card payments, are all carried out in a secure environment and are blazing fast.</p>\n<blockquote>\n<p>A blockchain-style data store is secure but it is not efficient in terms of computation, communication, and data point of view.</p>\n</blockquote>\n</li>\n<li>\n<p><strong>The Consensus mechanism</strong></p>\n<blockquote>\n<p>Consesnus Protocol\nMetaMUI’s consensus protocol is a combination of PBFT(Practical Byzantine Fault Tolerance) and PoS(Proof of\nStake). Only Bank Nodes participate in the consensus of built-in blockchains. Bank Node can be a block\nproposer and endorser of both built-in blockchains and all digital currency blockchains. The mobile node can\nparticipate in the consensus of newly created digital currencies as an endorser. In the case of digital currency\nconsensus, <strong>only a Bank Node can be a leader or the block proposer</strong>.</p>\n</blockquote>\n<p>Bank nodes have the authority to govern, validate transactions and decide the fate of the entire system, which makes the bank a central authority here. This gives authority to the bank nodes to validate any transactions. The bank may decide to invalidate valid transactions or validate invalid transactions and no one would know cause it would be there “on the blockchain”. (Not saying that this would be done, because a banking sector obviously wouldn’t carry out fraudulent transactions.) This does raise a question about the prorposed solution that claims to have solved the blockchain trilemma.</p>\n<blockquote>\n<p>The leader node also acts as a serializer to serialize transactions. The leader node receives block rewards and\ntransaction fees. Endorser also receives the endorsing rewards when the node’s endorsement is included in the\nmajority vote.</p>\n</blockquote>\n<p>The endorser and leader nodes receive rewards based on the node’s endorsement. The endorser node receives the\nendorsement rewards when the node’s endorsement is included in the majority vote. The leader node receives the\nblock rewards when the node’s block is included in the majority vote. How does a network with an nPOS consensus protocol pay or reward nodes if there are no gas fees involved?</p>\n</li>\n<li>\n<p><strong>ACB (Algorithmic central bank)</strong></p>\n<p>The current platform runs a single and private blockchain without any overhead of the AI mechanism that will fuel the infrastructure.\nImplementing the Algorithmic Central Bank can be a key player in the industry. The current platform is inefficient when run using a single private blockchain and no centralized banking establishment to control inflation and deflation. The product can be improved when the existing mechanism as proposed in the whitepaper come to play. The current platform might not be a very good solution for the industry unless the stated propositions come to play.</p>\n<blockquote>\n<p>MetaMUI is just the starting point. We suggested fundamental solutions for Algorithmic Central Bank and a\ndecentralized, but expandable ecosystem based on mobile nodes. But we believe the current development of\nartificial intelligence technologies such as deep learning and reinforcement learning will be the key game changers of the blockchain platform. MetaMUI was designed to take care of these technologies. In near future,\nwe can see the powerful coordination of more flexibilities based on artificial intelligence and robustness/\nstability for transactions based on the blockchain platform.</p>\n</blockquote>\n<blockquote>\n<p>The digitalization of currency opens up new opportunities for digitalized monetary decision-making. Bank node\nis an early form of Algorithmic Central Bank that makes monetary decisions based on financial big data. It is\npossible to apply a federated learning algorithm at the central bank node and collect and learn a decentralized\nmodel on many mobile nodes.</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"ideological-challenges\" tabindex=\"-1\">Ideological challenges</h3>\n<p>MetaMUI wallet also lets you regulate digital currencies and crypto-currencies across the world and carry out transactions without having to pay conversion fees. This current implementation of the ideology may become an issue because of the following reasons:</p>\n<ol>\n<li>\n<p><strong>Governments of countries do not generally allow cryptocurrencies to be legal tender.</strong> There are two countries as of now that currently allow cryptocurrencies to be traded and accepted as legal tender and both of them are not the most developed or developing nations in the world. Targeting these countries to sell the platform might not be wise.</p>\n<p>Governments usually have a means of regulating easier banking methods and exchange methods. Let us take the example of India. India doesn’t allow cryptocurrencies to be legal tender. Digital payments are very popular and online payments being carried out in India follow traditional banking and government norms and are very fast. I don’t think anyone in the current generation nowadays goes to the bank to deposit or withdraw money. Let us take another example of the UID system followed in India, <strong>Adhaar</strong> system. The system is encrypted using military-grade encryption. The system is very secure and the government is very responsible for the security of the system. The current implementation of encryption used at MetaMUI Wallet is SHA-256 which although a very secure algorithm would seem like legacy software for the Indian government to integrate and work with. The task is tedious and unnecessary.</p>\n<p>There seems no solid revolutionary reason for a bank/government to introduce a new platform to run which regulates and carries out transactions and exchanges for free. Excellent existing platforms are already available and our infrastructure is not a new platform. <em>(Paytm, Gpay, Paypal, CoinDCX etc.)</em></p>\n</li>\n<li>\n<p><strong>Conversion fees are a means of generating tax for a government.</strong> International exchanges or cryptocurrency exchanges are a means of generating tax for a government. When you convert INR to USD or vice versa, you are generating tax for the government. Current conversion from ETH, BTC to INR is a very low fee but there does exist a fee.</p>\n<blockquote>\n<p>MetaMUI Network is an Internet-based cross-border payment network. In MetaMUI Network, each user’s DID is\na universal accounting address that user can send or receive digital currencies. Utilizing collateral asset feature\nand meta-blockchain feature of MetaMUI Blockchain, it is possible to dynamically create meta-coin on the fly to\nfacilitate cross-border payment between the currencies those are not on the MetaMUI Network. Similar to the\nstable coin issuance, central bank or commercial bank of each country can create stable meta-coin on the\nMetaMUI Network and perform international fund transfer</p>\n</blockquote>\n<p>The platform introduced doesn’t have gas fees. Gas fees are the fees in a blockchain that you need to pay to make a transaction or carry out a smart contract. A miner validates your transaction by spending its computation power and in return is awarded the gas money. Gas fees are a means of generating revenue for a miner, but having no gas fees in a private blockchain implies that the bank and the infrastructure have to spend money on electricity and computing resources to validate transactions. It doesn’t make sense to have a platform that makes you spend money on electricity and computing resources just to validate transactions.</p>\n<blockquote>\n<p>When users are trading digital stocks or assets in a peer-to-peer way, MetaMUI provides an atomic swap of\ndigital stock and digital currency. Since digital stock is bind to the user’s identity, ownership transfer notification\nand tax payment can happen at the same time as the stock trade. This eliminates the need for separate\nshareholder registration, issuance of shareholder certificates, tax reports to the government, and tax payments.</p>\n</blockquote>\n<p>Let us again take the example of India. Cryptocurrencies when made legal in India would have a 30% conversion fee, you’d have to pay a 30% tax to the government for converting the cryptocurrency. It wouldn’t make sense for India to allow the platform to run without a conversion fee. Also, there are a lot of other, well-established platforms playing in the same field and pitching and hitting hard in these areas. <em>(CoinDCX, Coinbase, etc)</em></p>\n</li>\n<li>\n<p><strong>Present operating scenario in foreign exchange platforms.</strong></p>\n<blockquote>\n<p>Cheaper, faster, and efficient cross-border payments are the need of the hour in today’s digital world. The\nMetaMUI Network is designed to host multiple blockchains concurrently. Each of these blockchains can run\nindependently of each other and communicate (transact) with each other. The currency exchange is made\npossible through atomic swaps and multi-currency transfer is possible with an exchange service provider\n(Master Node) making it excellent for direct sovereign currency to sovereign currency cross-border payments</p>\n</blockquote>\n<p>The existing exchange platforms are extremely secure, well-established, and highly efficient. The working and operation of these platforms are governed by international laws. The current implementation of MetaMUI Wallet doesn’t include any gas fees for transactions. It’d either have to tie up with an exchange platform or would have to come up with some other way to convince a country to let it handle all of its transactions. Either way, it would be both cost ineffective solutions. With private blockchains and 0 gas fees, MetaMUI Wallet will be having a hard time trying to carry out free transactions across the globe. The organization, at first, would have to pay for the mining and electricity and on top of that would have to pay the cross-border payment fees too.</p>\n</li>\n</ol>\n<h2 id=\"a-better-direction\" tabindex=\"-1\">A better direction</h2>\n<p>There might exist better, more efficient solutions to the above problems but two of them may have these similar approaches:</p>\n<ol>\n<li>\n<p><strong>Introduce a public blockchain</strong> This solves the problem of spending money on validating transactions. Miners can validate transactions and the government/ bank can verify the transactions. This would be a huge bump in security, transparency, and cost efficiency.</p>\n<p>It still doesn’t solve the problem of introducing a new platform just to do this. The tax play still becomes an issue here. How does the platform plan on managing taxes? Why would a bank allow a platform to run which would not benefit it in any manner? The government levies taxes to exchange international currencies. Why would it stop doing that? Even if it is allowed, how would it compete with other platforms working towards a similar strategy?</p>\n</li>\n<li>\n<p><strong>Following traditional client-server architecture using a distributed database</strong> This would solve the problem of efficiency. Traditional architectures have been here for a very long time and a lot of research has been done on optimizing the existing infrastructure. Horizontal slicing, vertical slicing, and many other optimization techniques may be used to improve the efficiency of the platform. The platform would be faster, equally secure, and more efficient.</p>\n<p>The issue with this approach is the question that what problem is it really trying to solve. Don’t there exist platforms that are already doing everything this infrastructure is trying to solve? How would it be able to compete with the existing giants? Isn’t the solution building a redundant, regular, exchange banking platform that the world has no less of?  How would the platform differentiate itself? What is MVP, the USP of the platform? If it decides to work together with the government, what ensures that other existing strong infrastructures do not also decide to do this and do it better?</p>\n</li>\n</ol>\n<h3 id=\"improving-the-current-infrastructure\" tabindex=\"-1\">Improving the current infrastructure</h3>\n<p>The approaches may be justified once some of the important issues are addressed. Other than the mentioned problems, a lot of other factors need to pitch in to improve and make the platform more a feasible good product to be sold. The product being built is excellent, no doubt. The deep learning models in the ACB mechanism, the tech being used, the next generation Polkadot blockchains which are much, much faster (1000 transactions per second as compared to 7-10 transactions in traditional blockchain networks) and allow a huge on queries in a much faster time, the faster and more efficient transaction mechanisms, interoperability, the economic scalability, user-driven governance, the forkless upgrades, and the claimed security and transparency, are a step in the right direction, but there are grave issues those still need to be discussed before the product is introduced and launched.</p>\n<p><em>Ref: <a href=\"https://sovereignwallet-network.github.io/whitepaper/MetaMUI-Blockchain-White-Paper.pdf\">Whitepaper</a></em></p>\n"},{"author":"Anubhab Patnaik","title":"Image Compression using Quad Tree Decomposition","date":"2023-02-08","description":"A short demonstration of how Quad Tree Decomposition can be used to compress images.","tags":["project","imagecompression","quadtrees"],"ShowBreadCrumbs":true,"link":"https://anubhavp.dev/blog/qd-compression.html","content":""},{"author":"Anubhab Patnaik","title":"QTree","date":"2023-02-14","description":"Inspired by KoalasToTheMax, QTree is a short live demonstration of image compression and decompression using Quadtrees that partition a two-dimensional image by recursively subdividing it into four quadrants.","tags":["project","tree","quadtree","image","compression"," decompression","javascript","canvas","web"],"ShowBreadCrumbs":true,"link":"https://anubhavp.dev/blog/qtree.html","content":"<script type=\"module\" src=\"/static/js/qtree/index.js\" ></script>\n<script type=\"module\" src=\"/static/js/qtree/qdtree.js\" ></script>\n<p>I stumbled upon <a href=\"https://koalastothemax.com/\">KoalasToTheMax</a> while reading a blog post about the most exciting web pages built for fun, and I was blown away. <a href=\"https://injuly.in/\">Srijan</a> explained how it works, and we were inspired to create something similar.</p>\n<p>But first, let’s get into the basics of the data structures used in our project.</p>\n<h2 id=\"quadtree\" tabindex=\"-1\">Quadtree</h2>\n<p>A quadtree is a tree-based data structure where each node has exactly four child nodes. Our quadtree represents a partition of space in two dimensions by dividing the region into four equal quadrants. Each quadrant is then subdivided into four equal quadrants, and so on. Each node in the tree has exactly four children or no children at all, which makes it a leaf node. The height of a quadtree depends on the amount of data being decomposed.</p>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/a/a0/Quad_tree_bitmap.svg\" alt=\"quadtree\"></p>\n<p>The root node is the image. Each node is the average value of its children’s pixel values. The tree is recursively subdivided until each leaf node is a single pixel. The tree is then traversed to compress the image. To decompress the image, the tree is traversed again.</p>\n<h3 id=\"member-functions\" tabindex=\"-1\">Member Functions</h3>\n<p>Our quadtree has the following member functions:</p>\n<ul>\n<li><strong>compressImageData</strong> : It takes the image data and the compression factor as the input and returns the quadtree.</li>\n<li><strong>createQTreeOfHeight</strong> : It takes the height of the tree and the bounding box as the input and returns the quadtree.</li>\n<li><strong>populate</strong> : It populates the quadtree with the pixel values.</li>\n<li><strong>getRGBValuesFromCoordinates</strong> : It takes the quadtree and the coordinates as the input and returns the pixel value at the given coordinates.</li>\n</ul>\n<h3 id=\"node\" tabindex=\"-1\">Node</h3>\n<p>The QTNODE class represents a node in the quadtree. It has the following properties:</p>\n<ul>\n<li><strong>x</strong> : x-coordinate</li>\n<li><strong>y</strong> : y-coordinate</li>\n<li><strong>w</strong> : width of the bounding box.</li>\n<li><strong>h</strong> : height of the bounding box.</li>\n<li><strong>children</strong> : array of four children.</li>\n<li><strong>rgb</strong> : pixel value of the node.</li>\n</ul>\n<p>Functions:</p>\n<ul>\n<li><strong>draw</strong> : draws the node. Takes the canvas context as the input and returns nothing.</li>\n<li><strong>insert</strong>: inserts a node into the quadtree. Takes the quadtree and the node as the input and returns the quadtree.</li>\n<li><strong>drawAtHeight</strong>: draws the nodes at a given height. Takes the canvas context, the height of the tree, and the current height as the input and returns nothing.</li>\n<li><strong>draw</strong>: draws the nodes. Takes the canvas context and the height of the tree as the input and returns nothing.</li>\n<li><strong>reveal</strong>: reveals the nodes. Takes the canvas context and the height of the tree as the input and returns nothing.</li>\n<li><strong>computeAverageColor</strong>: computes the average color of the node. Takes the quadtree and the image data as the input and returns the pixel value.</li>\n</ul>\n<h2 id=\"demonstration\" tabindex=\"-1\">Demonstration</h2>\n<div class=\"container\" style=\"text-align: center;\">\n\t<canvas id=\"canvas-2\"  style=\"border: 1px solid black;\"\t>\n\t</canvas>\n\t<br>\n<p>Hover over any part of the canvas to recursively divide it into four quadrants.</p>\n</div>\n<div class=\"container\" style=\"text-align: center;\">\n\t<canvas id=\"canvas-1\" style=\"border: 1px solid black;\"> </canvas>\n\t<br>\n\t<input type=\"range\" id=\"slider\" min=\"0\" max=\"100\" value=\"0\">\n\t<br>\n<p>The slider controls the depth of the tree.</p>\n</div>\n The slider is set to 0 by default, which means the entire image is compressed into a single pixel. The slider when set to 100 means the image is not compressed at all. The slider can be set to any value between 0 and 100.\n<h2 id=\"setting-up-the-canvas\" tabindex=\"-1\">Setting up the Canvas</h2>\n<p>To start with, we need two canvases - one for you to hover over and the other for you to control the depth of the tree using a slider and render the nodes evenly. Initially, we had multiple ways of taking an image as the input form, such as uploading an image, using query parameters, etc. But for this demonstration, we’ll keep it simple and use a static image.</p>\n<p>Here’s some JavaScript code that will load the image into a canvas:</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> image = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Image</span>();\nimg.<span class=\"hljs-property\">src</span> = <span class=\"hljs-string\">&quot;/blog/assets/images/qtree/cryptopunk.jpeg&quot;</span>;\nimg.<span class=\"hljs-property\">onload</span> = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">initSliderCanvas</span>(img);\n    <span class=\"hljs-title function_\">initMouseCanvas</span>(img);\n};\n</code></pre>\n<p>I’ll go ahead and explain the working of the mouse hover canvas and you can explore the slider canvas. The code is available on <a href=\"https://github.com/cbrtl/qd-compression\">GitHub</a>, and you can play around with it later if you are interested.</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">import</span> { compressImageData } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./qdtree.js&quot;</span>;\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">initMouseCanvas</span>(<span class=\"hljs-params\">img</span>){\n\t<span class=\"hljs-keyword\">const</span> canvas = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;canvas-2&quot;</span>);\n    <span class=\"hljs-keyword\">const</span> ctx = canvas.<span class=\"hljs-title function_\">getContext</span>(<span class=\"hljs-string\">&quot;2d&quot;</span>);\n\n    <span class=\"hljs-keyword\">const</span> imageData = <span class=\"hljs-title function_\">readImageDataUsingCanvas</span>(canvas, ctx, image);\n    <span class=\"hljs-keyword\">const</span> qTree = <span class=\"hljs-title function_\">compressImageData</span>(imageData, <span class=\"hljs-number\">1</span>);\n    qTree.<span class=\"hljs-title function_\">draw</span>(ctx);\n\t...\n}\n</code></pre>\n<h3 id=\"image-data-compression\" tabindex=\"-1\">Image Data Compression</h3>\n<p>Now, let’s get to the fun part - compressing images. We import the <code>compressImageData</code> function from the qdtree.js file. This function takes the image data and the compression factor as the input and returns the quadtree. The <strong>height of the tree</strong> is calculated by taking the log of the number of pixels in the image and dividing it by the log of 4 (number of children of a node). The log of 4 is 2, and the log of the number of pixels is the height of the tree. The height of the tree is then rounded down to the nearest integer. The tree is then created using the <code>createQTreeOfHeight</code> function that takes the height of the tree and the <strong>bounding box</strong> as the input and returns the quadtree.</p>\n<p><strong>qdtree.js</strong></p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">compressImageData</span>(<span class=\"hljs-params\">imageData, factor</span>) {\n  <span class=\"hljs-keyword\">const</span> { width, height } = imageData;\n  <span class=\"hljs-keyword\">const</span> newWidth = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">ceil</span>(width / factor);\n  <span class=\"hljs-keyword\">const</span> newHeight = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">ceil</span>(height / factor);\n\n  <span class=\"hljs-keyword\">const</span> qTreeHeight = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">log</span>(newWidth * newHeight) / <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">4</span>));\n\n  <span class=\"hljs-keyword\">const</span> qTree = <span class=\"hljs-title function_\">createQTreeOfHeight</span>(qTreeHeight, {\n    <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-attr\">w</span>: width,\n    <span class=\"hljs-attr\">h</span>: height,\n  });\n\n  <span class=\"hljs-title function_\">populate</span>(qTree, imageData);\n  <span class=\"hljs-keyword\">return</span> qTree;\n}\n</code></pre>\n<p>The <code>createQTreeOfHeight</code> function takes in the height of the tree and the bounding box as the input and returns the quadtree.</p>\n<h4 id=\"bounding-box\" tabindex=\"-1\">Bounding Box</h4>\n<p>The bounding box is the area that the node represents. The bounding box is initially the entire image. The bounding box is then divided into four equal quadrants, and the process is repeated until the height of the tree is 0. The <code>populate</code> function takes the quadtree and the image data as the input and populates the tree with the average pixel values of the children’s pixel values.</p>\n<pre><code class=\"language-js\"> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createQTreeOfHeight</span>(<span class=\"hljs-params\">height, aabb</span>) {\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">recursiveCreate</span>(<span class=\"hljs-params\">node, height</span>) {\n    <span class=\"hljs-keyword\">if</span> (height === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span>;\n\n    <span class=\"hljs-keyword\">const</span> { x, y, w, h } = node.<span class=\"hljs-property\">aabb</span>;\n    <span class=\"hljs-keyword\">const</span> halfW = w / <span class=\"hljs-number\">2</span>;\n    <span class=\"hljs-keyword\">const</span> halfH = h / <span class=\"hljs-number\">2</span>;\n\n\n\t<span class=\"hljs-comment\">//top left</span>\n    node.<span class=\"hljs-property\">tl</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">QTNode</span>({\n      x,\n      y,\n      <span class=\"hljs-attr\">w</span>: halfW,\n      <span class=\"hljs-attr\">h</span>: halfH,\n    });\n\t\t<span class=\"hljs-comment\">//top right</span>\n    node.<span class=\"hljs-property\">tr</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">QTNode</span>({\n      <span class=\"hljs-attr\">x</span>: x + halfW,\n      y,\n      <span class=\"hljs-attr\">w</span>: halfW,\n      <span class=\"hljs-attr\">h</span>: halfH,\n    });\n\t\t<span class=\"hljs-comment\">//bottom left</span>\n    node.<span class=\"hljs-property\">bl</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">QTNode</span>({\n      x,\n      <span class=\"hljs-attr\">y</span>: y + halfH,\n      <span class=\"hljs-attr\">w</span>: halfW,\n      <span class=\"hljs-attr\">h</span>: halfH,\n    });\n\t\t<span class=\"hljs-comment\">//bottom right</span>\n    node.<span class=\"hljs-property\">br</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">QTNode</span>({\n      <span class=\"hljs-attr\">x</span>: x + halfW,\n      <span class=\"hljs-attr\">y</span>: y + halfH,\n      <span class=\"hljs-attr\">w</span>: halfW,\n      <span class=\"hljs-attr\">h</span>: halfH,\n    });\n\n    <span class=\"hljs-title function_\">recursiveCreate</span>(node.<span class=\"hljs-property\">tl</span>, height - <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-title function_\">recursiveCreate</span>(node.<span class=\"hljs-property\">tr</span>, height - <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-title function_\">recursiveCreate</span>(node.<span class=\"hljs-property\">bl</span>, height - <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-title function_\">recursiveCreate</span>(node.<span class=\"hljs-property\">br</span>, height - <span class=\"hljs-number\">1</span>);\n  }\n }\n</code></pre>\n<h3 id=\"image-data-to-quadtree\" tabindex=\"-1\">Image data to Quadtree</h3>\n<p>Alright, let’s talk about the <code>reveal</code> function, which is like a magician revealing the hidden nodes under the mouse. And then there’s the <code>draw</code> function, which is like an artist sketching the nodes on the canvas. The <code>update</code> function is like your mom constantly cleaning up after you every 30 milliseconds. It clears the canvas and redraws the nodes on the canvas, all to make sure it looks neat and tidy.</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">initMouseCanvas</span>(<span class=\"hljs-params\">img</span>){\n\t...\n <span class=\"hljs-keyword\">const</span> mousePos = { <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">0</span> };\n    <span class=\"hljs-keyword\">let</span> lastUpdateTime = -<span class=\"hljs-title class_\">Infinity</span>;\n    <span class=\"hljs-keyword\">const</span> frameTime = <span class=\"hljs-number\">30</span>;\n\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-keyword\">const</span> currentTime = <span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">now</span>();\n        <span class=\"hljs-keyword\">const</span> diff = currentTime - lastUpdateTime;\n        <span class=\"hljs-keyword\">if</span> (diff &lt; frameTime) <span class=\"hljs-keyword\">return</span>;\n\n        lastUpdateTime = currentTime;\n        ctx.<span class=\"hljs-title function_\">clearRect</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, canvas.<span class=\"hljs-property\">width</span>, canvas.<span class=\"hljs-property\">height</span>);\n        qTree.<span class=\"hljs-title function_\">reveal</span>(mousePos.<span class=\"hljs-property\">x</span>, mousePos.<span class=\"hljs-property\">y</span>);\n        qTree.<span class=\"hljs-title function_\">draw</span>(ctx);\n    }\n\n    canvas.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;mousemove&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">const</span> rect = canvas.<span class=\"hljs-title function_\">getBoundingClientRect</span>();\n        <span class=\"hljs-keyword\">const</span> x = e.<span class=\"hljs-property\">clientX</span> - rect.<span class=\"hljs-property\">left</span>;\n        <span class=\"hljs-keyword\">const</span> y = e.<span class=\"hljs-property\">clientY</span> - rect.<span class=\"hljs-property\">top</span>;\n        mousePos.<span class=\"hljs-property\">x</span> = x;\n        mousePos.<span class=\"hljs-property\">y</span> = y;\n        <span class=\"hljs-title function_\">update</span>();\n    });\n}\n</code></pre>\n<h2 id=\"conclusion\" tabindex=\"-1\">Conclusion</h2>\n<p>So, what’s the point of all this? Well, we can use a quadtree to compress and decompress images when the mouse hovers over a specific area of the canvas. It’s like a secret code that unlocks a hidden image!</p>\n<p>If you want to explore more, check out the slider and the entire source code on <a href=\"http://github.com/cbrtl/qd-compression\">GitHub</a>. And don’t hesitate to ask us any questions or give suggestions. We’re always happy to chat on GitHub!</p>\n<p><em>Ref: <a href=\"https://en.wikipedia.org/wiki/Quadtree\">Wikipedia</a></em></p>\n"},{"author":"Anubhab Patnaik","title":"Rust: The next C++ ?","date":"2022-10-14","description":"Rust is a multi-paradigm systems programming language created to ensure high performance similar to that offered by C and C++ but with emphasis on code safety","tags":["project"],"ShowBreadCrumbs":true,"link":"https://anubhavp.dev/blog/rust.html","content":"<p>Rust is a multi-paradigm systems programming language created to ensure high performance similar to that offered by C and C++, but with emphasis on code safety, the lack of which is probably why C and C++ are painful to deal with. It accomplishes memory safety without using a dedicated garbage collector. Rust is also an ahead-of-time compiled language, which means that you can compile a rust program, give it to someone else, and they can run it even without having Rust installed. However, Rust has more than just memory safety on its side. High performance while processing large amounts of data, support for concurrent programming, and an effective compiler are other reasons why well-known software heavyweights such as Firefox, Dropbox, Cloudflare, and many web-3 startups and large corporations use Rust in production.</p>\n<p>Some questions that may come to your mind are:</p>\n<ol>\n<li>If Rust is created to achieve performance similar to that offered by C++, then why not use C++ instead?</li>\n<li>I know Java, JavaScript, and Python to be more popular choices amongst peers. Why not use those languages instead?</li>\n<li>What about new languages like Go, Kotlin, Swift, etc.?</li>\n</ol>\n<p>To answer these questions, let us first go through how a programming language works.</p>\n<h2 id=\"programming-languages-and-their-working\" tabindex=\"-1\">Programming Languages and their working</h2>\n<p>A programming language is a set of instructions that can be used to interact with and control a computer. These languages can be used for a multitude of purposes, such as creating a website, analyzing data, writing a program to solve a mathematical problem, creating a game, piloting a car, building a robot, making rockets take off, controlling spacecraft and the list goes on. A computer, even though can control a rover on Mars, detect an incoming ballistic missile, and detonate it before it reaches you, cannot understand English, or anything else except <strong>‘0’</strong> &amp; <strong>‘1’</strong>. Computers can be thought of to be made up of tiny switches, and can be either ‘on’ (1) or ‘off’ (0) called <strong>‘bits’</strong>. Whatever instruction you want to execute on a computer, has to be converted into a series of '0’s and '1’s before it can be executed. Even a simple “Hi” is parsed as <strong>01001000 01101001</strong>. Yes, this is what Siri responds when you <em>Hey Siri</em>. Since the English language is vast and complicated, it is not possible to convert it into a series of ‘0’ and ‘1’ directly. A subset of English or any other language is created, which is called a <strong>programming language</strong>. High-Level Programming Languages have English-like syntax and are designed to be easy to read and write, whereas low-Level Programming Languages are designed to be easy for the computer to understand. To make things easier for us, there are tools that convert whatever we want the computer to do into a series of '0’s and '1’s. This series of '0’s and '1’s is then executed by the computer.</p>\n<h3 id=\"compilers-and-interpreters\" tabindex=\"-1\">Compilers and interpreters</h3>\n<p>A <strong>compiler</strong> or an <strong>interpreter</strong> is a tool that converts a program written in a programming language <em>(source code)</em> into a series of '0’s and '1’s that can be executed by a computer. Compilers and interpreters differ in the way they work. A compiler converts the entire program into a series of '0’s and '1’s <em>(machine code)</em> and then executes it. An interpreter, on the other hand, executes the program line by line.</p>\n<p><strong>Why did we need interpreters?</strong></p>\n<p>Compiled languages need a “build” step. You need to compile your program before you can run it. To run your program on a different computer, you will have to compile it on that computer as well. Interpreters run through a program line by line and execute each command. You can run a program without having to compile it first. This makes it easier to run programs on different computers.</p>\n<p>Another notable disadvantage of compilers is <strong>platform dependency</strong> of the generated binary code. Compilers are designed to be CPU specific and run on a specific CPU architecture. This means that if you want to run a program on a different CPU architecture, you will have to compile it again.</p>\n<p><strong>Why do we still make use of compilers ?</strong></p>\n<p>Compilers are designed to be CPU specific, and as a result, they tend to be a lot <strong>faster and more efficient</strong> than interpreters. They also give the developer <strong>more control</strong> over hardware aspects, like memory management and CPU usage.</p>\n<p>A compiler is faster and more efficient than an interpreter, but an interpreter is easier to write than a compiler.</p>\n<h3 id=\"compiled-vs-interpreted-languages\" tabindex=\"-1\">Compiled Vs Interpreted languages</h3>\n<p>Interpreted languages were once significantly slower than compiled languages. But, with the development of <a href=\"https://guide.freecodecamp.org/computer-science/just-in-time-compilation\">just-in-time compilation</a>, that gap is shrinking. Modern scripting languages like Python and JavaScript are compiled to machine code at runtime using both compilers and interpreters, which makes them as fast as compiled languages. They are first compiled into an intermediate representation called <strong>bytecode</strong>, and then interpreted by a virtual machine which converts it to machine code.</p>\n<p>If you’re wondering what language should you choose to build your next project with, ask yourself this: what kind of platform do I want the application to run in? If you want to run your application on a web browser, you should go with JavaScript or TypeScript. If you want to run your application on a server, you may want to use Python or Go. In a mobile device, Swift or Kotlin might be the way to go. C++ is used for building complex applications and systems software, such as operating systems, browsers, and video games which require a heavy performance overhead.</p>\n<p><em>Rust</em>, <em>Go</em> and <em>C++</em> are popular compiled languages that are used for building high-performance applications. <em>Python</em> and <em>JavaScript</em> are popular interpreted languages that are used for building web applications.</p>\n<p>The speed advantage of the compiled language such as Golang (Go) in comparison to an interpreted language such as Java is one of the reasons why organizations write their microservices in Go. In complex computing environments such as cloud computing environments, where users get charged for every clock cycle, it makes sense to use the most efficient deployment artifact.</p>\n<h2 id=\"c-the-king-of-programming-languages\" tabindex=\"-1\">C++: The king of programming languages</h2>\n<p>C++ is a low-level, statically typed object-oriented language that allows you to have a good grasp of your computer’s resources and utilize them at your convenience. Since it is a compiled language, it surpasses the performance of most of the other interpreted languages. It is an extremely powerful language and is used in many applications such as operating systems, video games, the development of compilers and interpreters, etc. It has a huge community and is one of the most popular languages in the world.</p>\n<p>Reasons why C++'s performance is unparalleled:</p>\n<ol>\n<li>A compiled language. C++ is extremely fast because it is a compiled language.</li>\n<li>A low-level language. It allows you to cheaply use computing resources.</li>\n<li>Statically typed. It allows the compiler to optimize the code.</li>\n<li>Object-oriented programming. It allows you to create reusable code.</li>\n<li>A general purpose language. It can be used to create any kind of application.</li>\n</ol>\n<p>The issue with C++ boils down to how it <strong>manages memory</strong>. C++ is prone to memory leaks and dangling pointers, if not written properly.</p>\n<h2 id=\"memory-management-in-programming-languages\" tabindex=\"-1\">Memory Management in programming languages</h2>\n<p><strong>Variables</strong> are named memory locations that store data. A variable is a container that holds a value. The value can be of any type, such as <em>integer</em>, <em>float</em>, <em>character</em>, etc. Example:</p>\n<pre><code>int a = 10;\nfloat b = 10.5;\nchar c = 'a';\n</code></pre>\n<p>Computer programs need to allocate memory to store variables, data values, and data structures and deallocate memory when done using them. Memory is also used to store the program itself and the run-time system needed to support it. Programming languages can be categorized as those which provide <strong>automatic memory management</strong> and those which ask the programmer to allocate and <strong>free memory manually</strong>. Requiring the programmer to manage memory manually leads to a simpler compiler and run-time but requires more work from the programmer and is more error-prone. While automatic memory management is more convenient for the programmer, it is also more complex and slower and it is achieved by the use of <strong>garbage collection</strong>.</p>\n<h3 id=\"c\" tabindex=\"-1\">C++</h3>\n<p>C++ is a low-level language with manual memory management. C++ programs manually allocate and free memory using <strong>pointers</strong>.</p>\n<p><strong>Pointers</strong>\nPointers are variables that store the <strong>address</strong> of another variable and access the memory location of a variable. Pointers are used to pass large data structures to functions, to return multiple values from a function, to dynamically allocate memory, etc. Since there is no automatic memory management in C++, you need to be responsible for allocating and freeing memory. This process is achieved using the <strong>malloc</strong>, <strong>calloc</strong>, <strong>new</strong>, and <strong>delete</strong> keywords.</p>\n<p>With manual memory management, a few things can go wrong like memory leaks and dangling pointers. For instance, the dangling pointer problem arises when there is an attempt to use a pointer after it has been freed. Dangling pointer errors can arise whenever there is an error in the control flow logic of a program. The use of a pointer before allocation may be a fatal run-time error. Use after deallocation is not always fatal but neither of these is a good thing.</p>\n<pre><code class=\"language-cpp\">\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n  <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>  \n  </span>{\n    <span class=\"hljs-type\">int</span> *ptr=(<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-built_in\">sizeof</span>(<span class=\"hljs-type\">int</span>));  \n    <span class=\"hljs-type\">int</span> a=<span class=\"hljs-number\">560</span>;  \n    ptr=&amp;a;  \n    <span class=\"hljs-built_in\">free</span>(ptr);  \n    <span class=\"hljs-comment\">// dangling pointer</span>\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,*ptr);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;  \n}  \n\n</code></pre>\n<p>The above code will produce a segmentation fault since the pointer is pointing to a memory location that has been freed. To avoid this, we can set the pointer to NULL after freeing it.</p>\n<pre><code class=\"language-cpp\">\n    <span class=\"hljs-built_in\">free</span>(ptr);\n    ptr=<span class=\"hljs-literal\">NULL</span>;\n\n</code></pre>\n<p>Memory leaks and dangling pointer bugs are some reasons why C++ is not preferred for applications that require a lot of memory management. To avoid such issues, languages that provide automatic memory management are preferred over C++. Scripting languages manage memory using a <strong>garbage collector</strong>.</p>\n<h3 id=\"garbage-collection\" tabindex=\"-1\">Garbage collection</h3>\n<p>Garbage is a memory that was once used by objects but will never be read or written by the program again. A garbage collector (GC) is a background process that provides automatic memory management for modern languages by taking care of the allocation and deallocation of a program’s computer memory resources. As a result, certain categories of bugs are eliminated or substantially reduced such as:-</p>\n<p><strong>Dangling pointer bugs</strong> - a piece of memory is freed, but the objects still have references – one of these references is used in the program.</p>\n<p><strong>Double-free bugs</strong> – the program attempts to free a piece of memory that has already been freed.</p>\n<p><strong>Memory leaks</strong> – if a program does not free memory that is no longer referenced by any object, it can lead to memory exhaustion over time.</p>\n<p>Garbage collection seemed like a really good solution to the memory leak issues occurring in low-level languages such as C/C++ but, it had a few CPU issues. CPU usage increases when a significant amount of CPU time is spent in garbage collection. <em>Heap</em> is the memory that is used to allocate memory dynamically as opposed to the <em>stack</em> memory which is used to store the local variables. Local memory is quite automatic and local variables are allocated automatically. An increased allocation rate of objects on the managed heap causes garbage collection to occur more frequently.</p>\n<p>Here are a few types of Garbage collectors:</p>\n<p><strong>Mark &amp; Sweep GC</strong>(Tracing GC): A two-phase algorithm that first marks objects that are being referenced as “alive” and in the next phase frees the memory of objects that are not alive. JVM, C#, Ruby, JavaScript, and Golang employ this approach. JavaScript engines like V8 use a Mark &amp; Sweep GC along with Reference counting GC to complement it. This kind of GC is also available for C &amp; C++ as an external library.</p>\n<p><strong>Reference counting GC</strong>: Every object gets a reference count which is incremented or decremented as references to it change. Garbage is collected when the count becomes zero. This is not preferred as it cannot handle cyclic references. PHP, Perl, and Python use this kind of GC with workarounds to overcome cyclic references. This type of GC can be enabled for C++ as well.</p>\n<p><strong>Automatic Reference Counting(ARC)</strong>: Similar to Reference counting GC but instead of running a runtime process at a specific interval the retain and release instructions are inserted into the compiled code at compile-time and when an object’s reference becomes zero, it is cleared automatically as a part of the code execution. It also cannot handle cyclic references and relies on the developer. ARC is a feature of the Clang compiler and provides ARC for Objective C &amp; Swift.</p>\n<p><strong>Resource Acquisition is Initialization (RAII)</strong>: Objects and variables are <em>scoped</em>, and an object’s memory allocation is tied to its lifetime, which is from construction until destruction. It was introduced in C++ and is also used by Ada and Rust.</p>\n<h2 id=\"rust\" tabindex=\"-1\">Rust</h2>\n<p>Rust is a general-purpose systems programming language that runs blazingly fast, prevents segfaults, and guarantees thread safety. It is a multi-paradigm language that supports imperative, functional, and object-oriented programming. Rust is not only used to create low-level systems software such as operating systems, device drivers, and embedded software, but also used to create high-level applications such as web servers, command-line tools, and graphical user interfaces.</p>\n<p>Rust builds on <strong>RAII</strong>( Resource Acquisition is Initialization) to provide automatic memory management. RAII is a programming technique that uses the lifetime of an object to manage the lifetime of its resources. In Rust, the compiler ensures that the memory is freed as soon as the object goes out of scope. This is achieved by the use of <strong>smart pointers</strong>. Rust implements borrow checking and ownership rules to ensure that memory is freed as soon as the object goes out of scope. Additionally, Rust also provides a <strong>garbage collector</strong> that can be used to free memory when the object goes out of scope.</p>\n<blockquote>\n<p>Ownership and Borrowing</p>\n</blockquote>\n<pre><code class=\"language-rust\"><span class=\"hljs-meta\">#[derive(Debug)]</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Employee</span> {\n    id : <span class=\"hljs-type\">i32</span>\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">a</span> = Employee{id: <span class=\"hljs-number\">43</span>} ;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">b</span>  = a ;\n    <span class=\"hljs-comment\">// println!(&quot;{:?}&quot;, a) ; // error: borrow of moved value: `a`</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">c</span>= a ;\n    <span class=\"hljs-comment\">// println!(&quot;{:?}&quot;, a) ; // error: borrow of moved value: `a`</span>\n} \n</code></pre>\n<blockquote>\n<p>RAII</p>\n</blockquote>\n<pre><code class=\"language-rust\">    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">foo</span> = <span class=\"hljs-string\">&quot;value&quot;</span>; <span class=\"hljs-comment\">// owner is foo and is valid within this method</span>\n        <span class=\"hljs-comment\">// bar is not valid here </span>\n\n        {\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">bar</span> = <span class=\"hljs-string\">&quot;bar value&quot;</span>; <span class=\"hljs-comment\">// owner is bar and is valid </span>\n            <span class=\"hljs-comment\">//within this block scope</span>\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;value of bar is {}&quot;</span>, bar); <span class=\"hljs-comment\">// bar is valid </span>\n            <span class=\"hljs-comment\">//here</span>\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;value of foo is {}&quot;</span>, foo); <span class=\"hljs-comment\">// foo is valid </span>\n            <span class=\"hljs-comment\">//here</span>\n        }\n\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;value of foo is {}&quot;</span>, foo); <span class=\"hljs-comment\">// foo is valid here</span>\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;value of bar is {}&quot;</span>, bar); <span class=\"hljs-comment\">// bar is not valid </span>\n        <span class=\"hljs-comment\">//here as its out of scope</span>\n    }\n</code></pre>\n<h3 id=\"rust-c\" tabindex=\"-1\">Rust &gt; C++ ?</h3>\n<p>C++ is a high-performance, general-purpose programming language that has been widely used for decades. It is known for its flexibility and ability to handle low-level tasks, making it a popular choice for systems programming and game development. C++ also has a large and active community, which means that there are many libraries and resources available for developers to use. Rust, on the other hand, is a relatively <strong>new programming language</strong> that was first released in 2010. It is designed to be a safe and concurrent language, with a strong focus on preventing common programming errors such as null pointer dereferences and buffer overflows.</p>\n<p>Coming back to our questions that we were pondering upon earlier, now we get that compiled languages are preferred over interpreted languages as they are much faster and hence C++/ Go are preferred over Python/JavaScript. While C++ is extremely fast, it is also prone to memory leaks. Other languages such as Rust and Go offer better automatic memory management. Go implements a garbage collector which has a CPU usage overhead while Rust builds over RAII and implements borrow checking and ownership rules to ensure that memory is freed as soon as the object goes out of scope. Rust also provides a garbage collector that can be used to free memory when the object goes out of scope.</p>\n<p>Will rust replace C++ anytime soon? <strong>No</strong>. Rust is a relatively new language and is still in its early stages of development. It is not yet widely used in production, and there are still many features that are missing. However, it is gaining popularity and is being used in many large projects, such as Firefox and Servo. C++ has been widely used for decades and has a vast amount of <em>legacy code</em>, making it difficult for Rust to replace it. C++ has a much larger community and ecosystem, with a wealth of libraries, tools, and resources, making it easier for developers to find help and resources. Rust’s tooling is still evolving and may not be as mature or widely used as C++.</p>\n"},{"author":"Anubhab Patnaik","title":"zuzu: A Static Site Generator (SSG)","date":"2022-05-29","description":"Zuzu is a static site generator that converts all your markdown files into static htmls pages. It uses Github falvoured Markdown CSS and highlight js to beautify code snippets.","tags":["project"],"ShowBreadCrumbs":true,"link":"https://anubhavp.dev/blog/zuzu.html","content":"<p>Zuzu is a static site generator that takes in markdown files and render htmls pages. <a href=\"https://anubhavp.dev/oldblog\">This blog</a>, for example, has been written using this generator. This enables noobs like me to write blogs without having to learn a lot of code! It is a very simple and easy to use generator. All you need to do is to write a markdown file and it will be rendered as a page ;) You can create a new page by creating a new markdown file.</p>\n<h2 id=\"how-does-it-work\" tabindex=\"-1\">How does it work?</h2>\n<p>Zuzu parses the markdown file using <em>javascript</em> and renders it as <em>html documents</em>. It then saves the html files in the <code>public</code> folder. The public folder, with <code>index.html</code> file, is the final output of the generator and this can be deployed and hosted in various platforms. This particular blog has been deployed on <a href=\"https://anubhavp.dev/oldblog/\">Github Pages</a>.</p>\n<h3 id=\"1-create-a-markdown-file\" tabindex=\"-1\">1. Create a markdown file</h3>\n<pre><code># This is a title\nThis is a paragraph\nThis is another paragraph\nThis is a list:\n* Item 1\n* Item 2\n* Item 3\nThis is a code block:\n```\nprint(&quot;Hello World&quot;)\n```\nThis is a table:\n| Column 1 | Column 2 | Column 3 |\n| -------- | -------- | -------- |\n| 1        | 2        | 3        |\n| 4        | 5        | 6        |\n| 7        | 8        | 9        |\nThis is a link: [zuzu](https://anubhavp.dev/blog/zuzu.html)\n</code></pre>\n<h3 id=\"2-run-the-generator-and-find-your-blog\" tabindex=\"-1\">2. Run the generator and find your blog</h3>\n<p>Run <code>npm run generate</code> in the console.\nYou’ll now see the blog in the public folder! Run the index.html file in your browser to see your blog. You may now deploy your site\nto a server.</p>\n<h2 id=\"the-static-site-generator\" tabindex=\"-1\">The Static Site Generator</h2>\n<h3 id=\"1-libraries-used\" tabindex=\"-1\">1. Libraries used</h3>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/markdown-it\">MarkdownIt</a> <em>Markdown parser done right.</em></li>\n<li><a href=\"https://www.npmjs.com/package/markdown-it-anchor\">MarkdownItAnchor</a> <em>Header anchors for markdown-it.</em></li>\n<li><a href=\"https://www.npmjs.com/package/glob\">Glob</a> <em>“Globs” are the patterns you type when you do stuff like ls .js on the command line, or put build/ in a .gitignore file.</em></li>\n<li><a href=\"https://www.npmjs.com/package/gray-matter\">Gray-Matter</a> <em>Parse front-matter from a string or file.</em></li>\n<li><a href=\"https://npmjs.com/package/mkdirp\">Mkdirp</a> <em>Create Dirs if they do not exist.</em></li>\n</ul>\n<h3 id=\"2-workflow\" tabindex=\"-1\">2. Workflow</h3>\n<p>This is the code for the generator.js.\nThe code works in the following way:</p>\n<ol>\n<li><code>fs.readfile() from fs</code> reads all the files from the said directory and stores then in <code>filename</code> using <code>glob</code>. It is a <code>glob</code> that matches all the files in the directory. The <code>file system</code> module allows you to work with the file system on your computer.</li>\n<li><code>gray-matter</code> helps extracting front matter from the a string or file.\nConverts a string with front-matter, like this:</li>\n</ol>\n<pre><code>    title: Hello\n    slug: home\n    ---\n    &lt;h1&gt;Hello world!&lt;/h1&gt;\n</code></pre>\n<p>Into an object like this:</p>\n<pre><code>{\ncontent: '&lt;h1&gt;Hello world!&lt;/h1&gt;',\ndata: { \n    title: 'Hello', \n    slug: 'home' \n}\n}\n</code></pre>\n<p>It then extracts the front matter and stores it in <code>data</code>. It then stores the content in <code>content</code> and returns the <code>filename</code> to the <code>main()</code> function. It then repeats the process for all the files in the directory.</p>\n<ol start=\"3\">\n<li>\n<p>The <code>main()</code> function then takes in one <code>filename</code> at a time and then parses it through <code>markdownit( ,{markdownitanchor})</code>. <code>markdownit</code> parses the file and converts the markdown content into HTML files. It then creates a <code>html</code> file and writes the parsed content into it. It then saves the <code>html</code> file in the <code>public</code> folder. This process repeats for all the files in the directory.</p>\n</li>\n<li>\n<p>The converted html files are stored in the specified directories then using <code>mkdirp</code>. The <code>index.html</code> file isalready present in the <code>public</code> folder. <code>mkdirp</code> creates the directories if they do not exist.</p>\n</li>\n</ol>\n<h3 id=\"3-generator-code\" tabindex=\"-1\">3. Generator Code</h3>\n<pre><code class=\"language-js\">\n<span class=\"hljs-keyword\">import</span> fs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;fs&#x27;</span>\n<span class=\"hljs-keyword\">import</span> glob <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;glob&#x27;</span>\n<span class=\"hljs-keyword\">import</span> matter <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;gray-matter&#x27;</span>\n<span class=\"hljs-keyword\">import</span> mkdirp <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;mkdirp&#x27;</span>\n<span class=\"hljs-keyword\">import</span> path <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;path&#x27;</span>\n<span class=\"hljs-keyword\">import</span> hljs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;highlight.js&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">MarkdownIt</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;markdown-it&#x27;</span>\n<span class=\"hljs-keyword\">import</span> markdownItAnchor <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;markdown-it-anchor&#x27;</span>\n<span class=\"hljs-keyword\">import</span> string <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;string&#x27;</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">slugify</span> = s =&gt; <span class=\"hljs-title function_\">string</span>(s).<span class=\"hljs-title function_\">slugify</span>().<span class=\"hljs-title function_\">toString</span>()\n\n\n<span class=\"hljs-keyword\">const</span> md = <span class=\"hljs-title class_\">MarkdownIt</span>({\n    <span class=\"hljs-attr\">html</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">linkify</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">typographer</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-title function_\">highlight</span>(<span class=\"hljs-params\">str, language</span>) {\n        <span class=\"hljs-keyword\">if</span> (language &amp;&amp; hljs.<span class=\"hljs-title function_\">getLanguage</span>(language)) {\n            <span class=\"hljs-keyword\">try</span> {\n\n                <span class=\"hljs-keyword\">return</span> hljs.<span class=\"hljs-title function_\">highlight</span>(str, { <span class=\"hljs-attr\">language</span>: language }).<span class=\"hljs-property\">value</span>;\n            } <span class=\"hljs-keyword\">catch</span> (err) {\n                <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(err)\n            }\n        }\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n    }\n}).<span class=\"hljs-title function_\">use</span>(markdownItAnchor, { slugify });\n\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">readFile</span> = (<span class=\"hljs-params\">filename</span>) =&gt; {\n    <span class=\"hljs-keyword\">const</span> rawFile = fs.<span class=\"hljs-title function_\">readFileSync</span>(filename, <span class=\"hljs-string\">&#x27;utf8&#x27;</span>)\n    <span class=\"hljs-keyword\">const</span> parsed = <span class=\"hljs-title function_\">matter</span>(rawFile)\n    <span class=\"hljs-keyword\">const</span> html = md.<span class=\"hljs-title function_\">render</span>(parsed.<span class=\"hljs-property\">content</span>)\n\n    <span class=\"hljs-keyword\">return</span> {...parsed, html }\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">templatize</span> = (<span class=\"hljs-params\">template, { date, title, content, author }</span>) =&gt;\n    template\n    .<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/&lt;!-- PUBLISH_DATE --&gt;/g</span>, date)\n    .<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/&lt;!-- TITLE --&gt;/g</span>, title)\n    .<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/&lt;!-- CONTENT --&gt;/g</span>, content)\n    .<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/&lt;!-- AUTHOR --&gt;/g</span>, author)\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">saveFile</span> = (<span class=\"hljs-params\">filename, contents</span>) =&gt; {\n    <span class=\"hljs-keyword\">const</span> dir = path.<span class=\"hljs-title function_\">dirname</span>(filename)\n    mkdirp.<span class=\"hljs-title function_\">sync</span>(dir)\n    fs.<span class=\"hljs-title function_\">writeFileSync</span>(filename, contents)\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">getOutputFilename</span> = (<span class=\"hljs-params\">filename, outPath</span>) =&gt; {\n    <span class=\"hljs-keyword\">const</span> basename = path.<span class=\"hljs-title function_\">basename</span>(filename)\n    <span class=\"hljs-keyword\">const</span> newfilename = basename.<span class=\"hljs-title function_\">substring</span>(<span class=\"hljs-number\">0</span>, basename.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">3</span>) + <span class=\"hljs-string\">&#x27;.html&#x27;</span>\n    <span class=\"hljs-keyword\">const</span> outfile = path.<span class=\"hljs-title function_\">join</span>(outPath, newfilename)\n    <span class=\"hljs-keyword\">return</span> outfile\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">processFile</span> = (<span class=\"hljs-params\">filename, template, outPath</span>) =&gt; {\n    <span class=\"hljs-keyword\">const</span> file = <span class=\"hljs-title function_\">readFile</span>(filename)\n    <span class=\"hljs-keyword\">const</span> outfilename = <span class=\"hljs-title function_\">getOutputFilename</span>(filename, outPath)\n\n    <span class=\"hljs-keyword\">const</span> templatized = <span class=\"hljs-title function_\">templatize</span>(template, {\n        <span class=\"hljs-attr\">date</span>: file.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">date</span>,\n        <span class=\"hljs-attr\">title</span>: file.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">title</span>,\n        <span class=\"hljs-attr\">content</span>: file.<span class=\"hljs-property\">html</span>,\n        <span class=\"hljs-attr\">author</span>: file.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">author</span>,\n    })\n\n    <span class=\"hljs-title function_\">saveFile</span>(outfilename, templatized)\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`📝 <span class=\"hljs-subst\">${outfilename}</span>`</span>)\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">main</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n    <span class=\"hljs-keyword\">const</span> srcPath = path.<span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">&#x27;content&#x27;</span>)\n    <span class=\"hljs-keyword\">const</span> outPath = path.<span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">&#x27;public&#x27;</span>)\n    <span class=\"hljs-keyword\">const</span> template = fs.<span class=\"hljs-title function_\">readFileSync</span>(<span class=\"hljs-string\">&#x27;./templates/initial/template.html&#x27;</span>, <span class=\"hljs-string\">&#x27;utf8&#x27;</span>)\n    <span class=\"hljs-keyword\">const</span> filenames = glob.<span class=\"hljs-title function_\">sync</span>(srcPath + <span class=\"hljs-string\">&#x27;/**/*.md&#x27;</span>)\n\n    filenames.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">filename</span>) =&gt;</span> {\n        <span class=\"hljs-title function_\">processFile</span>(filename, template, outPath)\n    })\n}\n\n<span class=\"hljs-title function_\">main</span>()\n\n</code></pre>\n"}]