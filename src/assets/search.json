[{"title":"Decentralization in MetaMUI Wallet: A Case Study","author":"Anubhab Patnaik","date":"Aug 25, 2022","link":"https://anubhavp.me/blog/IssuesWithSovereignWallet.html","content":"<p>I am working with <a href=\"https://squbix.com/\">Squbix Digital</a> to build a decentralized, secure and scalable solution using blockchain technology for <a href=\"https://www.linkedin.com/company/metamui/?originalSubdomain=sg\">Sovereign Wallet</a>. The solution is to build a platform to exchange digital assets such as cryptocurrencies and digital currencies across a country/ organization and a cross border payments system. Here are my nitpicks on the product.</p>\n<ul>\n<li><a href=\"#metablockchain-core\">Metablockchain-core</a>\n<ul>\n<li><a href=\"#robust-decentralized-and-secure\">Robust, decentralized and secure?</a></li>\n<li><a href=\"#issues-with-the-current-infrastructure\">Issues with the current infrastructure</a></li>\n<li><a href=\"#ideological-challenges\">Ideological challenges</a></li>\n</ul>\n</li>\n<li><a href=\"#a-better-direction\">A better direction</a>\n<ul>\n<li><a href=\"#improving-the-current-infrastructure\">Improving the current infrastructure</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"metablockchain-core\" tabindex=\"-1\">Metablockchain-core</h2>\n<p>Metablockchain: The blockchain that lets you regulate digital currencies and cryptocurrencies across the nation. The platform is built on Polkadot protocol that has significantly better runtime efficiency, is cost-effective, and supports parallel faster transactions when compared to other traditional blockchains. The Polkadot protocol is designed to allow unrelated blockchains to securely talk to each other, so that value or data can flow between, say, the Ethereum and Bitcoin blockchains without any intermediary. It’s also designed to be speedy and scalable, via the use of many parallel blockchains (or “parachains”) that take much of the processing demand off of the main blockchain. The Polkadot network can process more than 1,000 transactions per second, compared to about 7 for Bitcoin and 30 for Ethereum. As the network grows and more parachains are added, Polkadot should get even faster, with speeds that could hit a million transactions per second.</p>\n<h3 id=\"robust-decentralized-and-secure\" tabindex=\"-1\">Robust, decentralized and secure?</h3>\n<p>The product is built in such a way that a country/ government/central banking authority can adopt this platform and make it run parallel with the currently existing infrastructure. Users can send and receive money across the country and it takes significantly less time to handle international transactions. It seems great, an easier way to handle transactions, without having to pay taxes to the government for making international exchanges! But the reality may not be as exciting.</p>\n<p>The current infrastructure is easy to use but is not as secure as claimed. The primary goal of the infrastructure is to make it easier for users to send and receive (traditional banking) money across the country and, it is not secure because it is <strong>not decentralized</strong>, and <strong>well-developed</strong> . Introducing a blockchain as a means of a runtime to carry out transactions as opposed to a traditional banking system is to make sure that all the transactions are handled in a decentralized manner and anyone when wanted, can query and view the source, and all the states of the transactions but it is not the case here.</p>\n<h3 id=\"issues-with-the-current-infrastructure\" tabindex=\"-1\">Issues with the current infrastructure</h3>\n<p>The implementation of the current platform relies on running a private blockchain. The banks are responsible for running validator nodes that run on the private blockchain and are responsible for validating the transactions and the states of the system. The claims as said were to improve security and transparency but this approach opposes the purpose of the claims. A private blockchain to carry out transactions makes it a kind of database and a runtime that is not public and not accessible to anyone. The banks are servers and the blockchains act as databases. The clients are the users. Seem familiar? This is a client-server architecture with a blockchain running as a database.</p>\n<p>Building a platform for carrying out transactions is perfectly okay but introducing blockchains as a means of a just database doesn’t make sense. It feels like a gimmick, a buzzword to secure seed &amp; money from investors. Also, there is nothing wrong with a client-server architecture but the current infrastructure even when implementing a blockchain as a runtime for transactions, which, as always, is <strong>slow</strong>. Blockchains are supposed to be secure and transparent but they are not efficient and fast. The transaction data when accessible publicly make the network secure, which it is not, here. The bank may decide to invalidate valid transactions or validate invalid transactions and no one would know cause it would be there “on the blockchain”. (Not saying that this would be done, because a banking sector obviously wouldn’t carry out fraudulent transactions.) Whereas a more traditional client-server architecture is equally secure and more efficient. Look at the current banking and payment gateway scenario in India. UPI payments, net banking, and debit card payments, are all carried out in a secure environment and are blazing fast.</p>\n<h3 id=\"ideological-challenges\" tabindex=\"-1\">Ideological challenges</h3>\n<p>MetaMUI wallet also lets you regulate digital currencies and crypto-currencies across the world and carry out transactions without having to pay conversion fees. This current implementation of the ideology may become an issue because of the following reasons:</p>\n<ol>\n<li>\n<p><strong>Governments of countries do not generally allow cryptocurrencies to be legal tender.</strong> There are two countries as of now that currently allow cryptocurrencies to be traded and accepted as legal tender and both of them are not the most developed or developing nations in the world. Targeting these countries to sell the platform might not be wise.</p>\n<p>Governments usually have a means of regulating easier banking methods and exchange methods. Let us take the example of India. India doesn’t allow cryptocurrencies to be legal tender. Online payments being carried out in India follow traditional banking and government norms and are very fast. Let us take another example of the UID system followed in India, <strong>Adhaar</strong> system. The system is encrypted using military-grade encryption. The system is very secure and the government is very responsible for the security of the system. The current implementation of encryption used at MetaMUI Wallet is SHA-256 which although a very secure algorithm would seem like legacy software for the Indian government to integrate and work with. The task is tedious and unnecessary.</p>\n<p>There seems no solid revolutionary reason for a bank/government to introduce a new platform to run which regulates and carries out transactions and exchanges for free. Excellent existing platforms are already available and our infrastructure is not a new platform. <em>(Paytm, Gpay, Paypal, etc.)</em></p>\n</li>\n<li>\n<p><strong>Conversion fees are a means of generating tax for a government.</strong> International exchanges or cryptocurrency exchanges are a means of generating tax for a government. When you convert INR to USD or vice versa, you are generating tax for the government. Current conversion from ETH, BTC to INR is a very low fee but there does exist a fee.</p>\n<p>The platform introduced doesn’t have gas fees. Gas fees were a means of generating revenue for a miner, but having no gas fees implies that the bank and the infrastructure have to spend money on electricity and computing resources to validate transactions. The platform doesn’t have to spend money on electricity and computing resources to validate transactions. It doesn’t make sense to have a platform that makes you spend money on electricity and computing resources just to validate transactions.</p>\n<p>Let us again take the example of India. Cryptocurrencies when made legal in India would have a 30% conversion fee, you’d have to pay a 30% tax to the government for converting the cryptocurrency. It wouldn’t make sense for India to allow the platform to run without a conversion fee. Also, there are a lot of other, well-established platforms playing in the same field and pitching and hitting hard in these areas. <em>(CoinDCX, Coinbase, etc)</em></p>\n</li>\n<li>\n<p><strong>Present operating scenario in foreign exchange platforms.</strong> The existing exchange platforms are extremely secure, well-established, and highly efficient. The working and operation of these platforms are governed by international laws. The current implementation of MetaMUI Wallet doesn’t include any gas fees for transactions. It’d either have to tie up with an exchange platform or would have to come up with some other way to convince a country to let it handle all of its transactions. Either way, it would be both cost ineffective solutions. With private blockchains and 0 gas fees, MetaMUI Wallet will be having a hard time trying to carry out free transactions across the globe. The organization, at first, would have to pay for the mining and electricity and on top of that would have to pay the cross-border payment fees too.</p>\n</li>\n</ol>\n<h2 id=\"a-better-direction\" tabindex=\"-1\">A better direction</h2>\n<p>There might exist better, more efficient solutions to the above problems but two of them may have these similar approaches:</p>\n<ol>\n<li>\n<p><strong>Introduce a public blockchain</strong> This solves the problem of spending money on validating transactions. Miners can validate transactions and the government/ bank can verify the transactions. This would be a huge bump in security, transparency, and cost efficiency.</p>\n<p>It still doesn’t solve the problem of introducing a new platform just to do this. The tax play still becomes an issue here. How does the platform plan on managing taxes? Why would a bank allow a platform to run which would not benefit it in any manner? The government levies taxes to exchange international currencies. Why would it stop doing that? Even if it is allowed, how would it compete with other platforms working towards a similar strategy?</p>\n</li>\n<li>\n<p><strong>Following traditional client-server architecture using a distributed database</strong> This would solve the problem of efficiency. Traditional architectures have been here for a very long time and a lot of research has been done on optimizing the existing infrastructure. Horizontal slicing, vertical slicing, and many other optimization techniques may be used to improve the efficiency of the platform. The platform would be faster, equally secure, and more efficient.</p>\n<p>The issue with this approach is the mind-tinkering question that what problem is it really trying to solve. Don’t there exist platforms that are already doing everything this infrastructure is trying to solve? How would it be able to compete with the existing giants? Isn’t the solution building a redundant, regular, exchange banking platform that the world has no less of?  How would the platform differentiate itself? What is MVP, the USP of the platform? If it decides to work together with the government, what ensures that other existing strong infrastructures do not also decide to do this and do it better?</p>\n</li>\n</ol>\n<h3 id=\"improving-the-current-infrastructure\" tabindex=\"-1\">Improving the current infrastructure</h3>\n<p>The approaches may be justified once some of the important issues are addressed. Other than the mentioned problems, a lot of other factors need to pitch in to improve and make the platform more a feasible good product to be sold. The product being built is excellent, no doubt. The tech being used, the next generation Polkadot blockchains which are much, much faster (1000 transactions per second as compared to 7-10 transactions in traditional blockchain networks) and allow a huge on queries in a much faster time, the faster and more efficient transaction mechanisms, interoperability, the economic scalability, user-driven governance, the forkless upgrades, and the claimed security and transparency, are a step in the right direction, but there are grave issues those still need to be discussed before the product is introduced and launched.</p>\n"},{"title":"zuzu: A Static Site Generator (SSG)","author":"Anubhab Patnaik","date":"May 29, 2022","link":"https://anubhavp.me/blog/zuzu.html","content":"<p>Zuzu is a static site generator that takes in markdown files and render htmls pages. <a href=\"https://anubhavp.me/blog\">This blog</a>, for example, has been written using this generator. This enables noobs like me to write blogs without having to learn a lot of code! It is a very simple and easy to use generator. All you need to do is to write a markdown file and it will be rendered as a page ;) You can create a new page by creating a new markdown file.</p>\n<ul>\n<li><a href=\"#how-does-it-work\">How Does it work</a>\n<ul>\n<li><a href=\"#1-create-a-markdown-file\">Create a markdown file.</a></li>\n<li><a href=\"#2-run-the-generator-and-find-your-blog\">Run the generator and find your blog.</a></li>\n</ul>\n</li>\n<li><a href=\"#the-static-site-generator\">The Static Site Generator</a>\n<ul>\n<li><a href=\"#1-libraries-used\">Libraries Used</a></li>\n<li><a href=\"#2-workflow\">Workflow</a></li>\n<li><a href=\"#3-generator-code\">Generator Code.</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"how-does-it-work\" tabindex=\"-1\">How does it work?</h2>\n<p>Zuzu parses the markdown file using <em>javascript</em> and renders it as <em>html documents</em>. It then saves the html files in the <code>public</code> folder. The public folder, with <code>index.html</code> file, is the final output of the generator and this can be deployed and hosted in various platforms. This particular blog has been deployed on <a href=\"https://anubhavp.me/blog/\">Github Pages</a>.</p>\n<h3 id=\"1-create-a-markdown-file\" tabindex=\"-1\">1. Create a markdown file</h3>\n<pre><code># This is a title\nThis is a paragraph\nThis is another paragraph\nThis is a list:\n* Item 1\n* Item 2\n* Item 3\nThis is a code block:\n```\nprint(&quot;Hello World&quot;)\n```\nThis is a table:\n| Column 1 | Column 2 | Column 3 |\n| -------- | -------- | -------- |\n| 1        | 2        | 3        |\n| 4        | 5        | 6        |\n| 7        | 8        | 9        |\nThis is a link: [zuzu](https://anubhavp.me/blog/zuzu.html)\n</code></pre>\n<h3 id=\"2-run-the-generator-and-find-your-blog\" tabindex=\"-1\">2. Run the generator and find your blog</h3>\n<p>Run <code>npm run generate</code> in the console.\nYou’ll now see the blog in the public folder! Run the index.html file in your browser to see your blog. You may now deploy your site\nto a server.</p>\n<h2 id=\"the-static-site-generator\" tabindex=\"-1\">The Static Site Generator</h2>\n<h3 id=\"1-libraries-used\" tabindex=\"-1\">1. Libraries used</h3>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/markdown-it\">MarkdownIt</a> <em>Markdown parser done right.</em></li>\n<li><a href=\"https://www.npmjs.com/package/markdown-it-anchor\">MarkdownItAnchor</a> <em>Header anchors for markdown-it.</em></li>\n<li><a href=\"https://www.npmjs.com/package/glob\">Glob</a> <em>“Globs” are the patterns you type when you do stuff like ls .js on the command line, or put build/ in a .gitignore file.</em></li>\n<li><a href=\"https://www.npmjs.com/package/gray-matter\">Gray-Matter</a> <em>Parse front-matter from a string or file.</em></li>\n<li><a href=\"https://npmjs.com/package/mkdirp\">Mkdirp</a> <em>Create Dirs if they do not exist.</em></li>\n</ul>\n<h3 id=\"2-workflow\" tabindex=\"-1\">2. Workflow</h3>\n<p>This is the code for the generator.js.\nThe code works in the following way:</p>\n<ol>\n<li><code>fs.readfile() from fs</code> reads all the files from the said directory and stores then in <code>filename</code> using <code>glob</code>. It is a <code>glob</code> that matches all the files in the directory. The <code>file system</code> module allows you to work with the file system on your computer.</li>\n<li><code>gray-matter</code> helps extracting front matter from the a string or file.\nConverts a string with front-matter, like this:</li>\n</ol>\n<pre><code>    title: Hello\n    slug: home\n    ---\n    &lt;h1&gt;Hello world!&lt;/h1&gt;\n</code></pre>\n<p>Into an object like this:</p>\n<pre><code>{\ncontent: '&lt;h1&gt;Hello world!&lt;/h1&gt;',\ndata: { \n    title: 'Hello', \n    slug: 'home' \n}\n}\n</code></pre>\n<p>It then extracts the front matter and stores it in <code>data</code>. It then stores the content in <code>content</code> and returns the <code>filename</code> to the <code>main()</code> function. It then repeats the process for all the files in the directory.</p>\n<ol start=\"3\">\n<li>\n<p>The <code>main()</code> function then takes in one <code>filename</code> at a time and then parses it through <code>markdownit( ,{markdownitanchor})</code>. <code>markdownit</code> parses the file and converts the markdown content into HTML files. It then creates a <code>html</code> file and writes the parsed content into it. It then saves the <code>html</code> file in the <code>public</code> folder. This process repeats for all the files in the directory.</p>\n</li>\n<li>\n<p>The converted html files are stored in the specified directories then using <code>mkdirp</code>. The <code>index.html</code> file isalready present in the <code>public</code> folder. <code>mkdirp</code> creates the directories if they do not exist.</p>\n</li>\n</ol>\n<h3 id=\"3-generator-code\" tabindex=\"-1\">3. Generator Code</h3>\n<pre><code class=\"language-js\">\n<span class=\"hljs-keyword\">import</span> fs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;fs&#x27;</span>\n<span class=\"hljs-keyword\">import</span> glob <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;glob&#x27;</span>\n<span class=\"hljs-keyword\">import</span> matter <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;gray-matter&#x27;</span>\n<span class=\"hljs-keyword\">import</span> mkdirp <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;mkdirp&#x27;</span>\n<span class=\"hljs-keyword\">import</span> path <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;path&#x27;</span>\n<span class=\"hljs-keyword\">import</span> hljs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;highlight.js&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">MarkdownIt</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;markdown-it&#x27;</span>\n<span class=\"hljs-keyword\">import</span> markdownItAnchor <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;markdown-it-anchor&#x27;</span>\n<span class=\"hljs-keyword\">import</span> string <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;string&#x27;</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">slugify</span> = s =&gt; <span class=\"hljs-title function_\">string</span>(s).<span class=\"hljs-title function_\">slugify</span>().<span class=\"hljs-title function_\">toString</span>()\n\n\n<span class=\"hljs-keyword\">const</span> md = <span class=\"hljs-title class_\">MarkdownIt</span>({\n    <span class=\"hljs-attr\">html</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">linkify</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">typographer</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-title function_\">highlight</span>(<span class=\"hljs-params\">str, language</span>) {\n        <span class=\"hljs-keyword\">if</span> (language &amp;&amp; hljs.<span class=\"hljs-title function_\">getLanguage</span>(language)) {\n            <span class=\"hljs-keyword\">try</span> {\n\n                <span class=\"hljs-keyword\">return</span> hljs.<span class=\"hljs-title function_\">highlight</span>(str, { <span class=\"hljs-attr\">language</span>: language }).<span class=\"hljs-property\">value</span>;\n            } <span class=\"hljs-keyword\">catch</span> (err) {\n                <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(err)\n            }\n        }\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n    }\n}).<span class=\"hljs-title function_\">use</span>(markdownItAnchor, { slugify });\n\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">readFile</span> = (<span class=\"hljs-params\">filename</span>) =&gt; {\n    <span class=\"hljs-keyword\">const</span> rawFile = fs.<span class=\"hljs-title function_\">readFileSync</span>(filename, <span class=\"hljs-string\">&#x27;utf8&#x27;</span>)\n    <span class=\"hljs-keyword\">const</span> parsed = <span class=\"hljs-title function_\">matter</span>(rawFile)\n    <span class=\"hljs-keyword\">const</span> html = md.<span class=\"hljs-title function_\">render</span>(parsed.<span class=\"hljs-property\">content</span>)\n\n    <span class=\"hljs-keyword\">return</span> {...parsed, html }\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">templatize</span> = (<span class=\"hljs-params\">template, { date, title, content, author }</span>) =&gt;\n    template\n    .<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/&lt;!-- PUBLISH_DATE --&gt;/g</span>, date)\n    .<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/&lt;!-- TITLE --&gt;/g</span>, title)\n    .<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/&lt;!-- CONTENT --&gt;/g</span>, content)\n    .<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/&lt;!-- AUTHOR --&gt;/g</span>, author)\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">saveFile</span> = (<span class=\"hljs-params\">filename, contents</span>) =&gt; {\n    <span class=\"hljs-keyword\">const</span> dir = path.<span class=\"hljs-title function_\">dirname</span>(filename)\n    mkdirp.<span class=\"hljs-title function_\">sync</span>(dir)\n    fs.<span class=\"hljs-title function_\">writeFileSync</span>(filename, contents)\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">getOutputFilename</span> = (<span class=\"hljs-params\">filename, outPath</span>) =&gt; {\n    <span class=\"hljs-keyword\">const</span> basename = path.<span class=\"hljs-title function_\">basename</span>(filename)\n    <span class=\"hljs-keyword\">const</span> newfilename = basename.<span class=\"hljs-title function_\">substring</span>(<span class=\"hljs-number\">0</span>, basename.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">3</span>) + <span class=\"hljs-string\">&#x27;.html&#x27;</span>\n    <span class=\"hljs-keyword\">const</span> outfile = path.<span class=\"hljs-title function_\">join</span>(outPath, newfilename)\n    <span class=\"hljs-keyword\">return</span> outfile\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">processFile</span> = (<span class=\"hljs-params\">filename, template, outPath</span>) =&gt; {\n    <span class=\"hljs-keyword\">const</span> file = <span class=\"hljs-title function_\">readFile</span>(filename)\n    <span class=\"hljs-keyword\">const</span> outfilename = <span class=\"hljs-title function_\">getOutputFilename</span>(filename, outPath)\n\n    <span class=\"hljs-keyword\">const</span> templatized = <span class=\"hljs-title function_\">templatize</span>(template, {\n        <span class=\"hljs-attr\">date</span>: file.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">date</span>,\n        <span class=\"hljs-attr\">title</span>: file.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">title</span>,\n        <span class=\"hljs-attr\">content</span>: file.<span class=\"hljs-property\">html</span>,\n        <span class=\"hljs-attr\">author</span>: file.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">author</span>,\n    })\n\n    <span class=\"hljs-title function_\">saveFile</span>(outfilename, templatized)\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`📝 <span class=\"hljs-subst\">${outfilename}</span>`</span>)\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">main</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n    <span class=\"hljs-keyword\">const</span> srcPath = path.<span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">&#x27;content&#x27;</span>)\n    <span class=\"hljs-keyword\">const</span> outPath = path.<span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">&#x27;public&#x27;</span>)\n    <span class=\"hljs-keyword\">const</span> template = fs.<span class=\"hljs-title function_\">readFileSync</span>(<span class=\"hljs-string\">&#x27;./templates/initial/template.html&#x27;</span>, <span class=\"hljs-string\">&#x27;utf8&#x27;</span>)\n    <span class=\"hljs-keyword\">const</span> filenames = glob.<span class=\"hljs-title function_\">sync</span>(srcPath + <span class=\"hljs-string\">&#x27;/**/*.md&#x27;</span>)\n\n    filenames.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">filename</span>) =&gt;</span> {\n        <span class=\"hljs-title function_\">processFile</span>(filename, template, outPath)\n    })\n}\n\n<span class=\"hljs-title function_\">main</span>()\n\n</code></pre>\n"}]